install.packages("kableExtra")
??table
??sum
mpg
library(tidyverse)
mpg
mpg[,"cty"]
mean(mpg[,"cty"])
class(mpg[,"cty"])
as.numeric((mpg[,"cty"]))
c(1,2,3,)
c(1,2,3)
class(c(1,2,3))
class(c("d","c","e"))
mpg$hwy
1:20
mpg$hwy[1:20]
mean(mpg$hwy[1:20])
mpg$year
mpg$year==2008
meam(mpg$cty[mpg$year==2008])
mean(mpg$cty[mpg$year==2008])
mean(mpg$cty[mpg$year==1999])
mpg$year==1999
2+3
library(tidyverse)
2+2
2+2
x=4+3
x+10
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
install.packages("grid")
install.packages("grid")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
install.packages(grid)
install.packages("gridExtra")
install.packages("gridBase")
df %>%
group_by(mouse,block) %>%
summarise(performance = mean(correct))
new_df<-df %>%
group_by(mouse,block) %>%
summarise(performance = mean(correct))
ggplot (data=new_df) +
geom_histogram(mapping = aes(x = performance),binwidth=0.01)
new_df <- df %>%
group_by(mouse, block) %>%
summarise(nTrials = n(), performance = mean(correct)) %>%
filter(nTrials == 10) ## filter after summarise
view(new_df)
new_df <- df %>%
group_by(mouse, block) %>%
summarise(nTrials = n(), performance = mean(correct)) %>%
filter(nTrials == 10) ## filter after summarise
view(new_df)
new_df
#new_df <-
df %>%
group_by(mouse, block) %>%
summarise(nTrials = n(), performance = mean(correct)) %>%
#filter(nTrials == 10) ## filter after summarise
ggplot (data = new_df) +
geom_histogram(mapping = aes(x = performance), binwidth = 0.01)
#new_df <-
df %>%
group_by(mouse, block) %>%
summarise(nTrials = n(), performance = mean(correct)) # %>%
#new_df <-
df %>%
group_by(mouse, block) %>%
summarise(nTrials = n(), performance = mean(correct))  %>%
filter(nTrials == 10) ## filter after summarise
ggplot (data = new_df) +
geom_histogram(mapping = aes(x = performance), binwidth = 0.01)
df %>% group_by(block) %>%
summarise(global_performance = mean(correct)) %>% # mean per block
ggplot() +
geom_line(mapping=aes(x=block,y=global_performance))
df1 <- df %>% group_by(mouse,block) %>%
summarise(performance = mean(correct)*100)
df1
ggplot(data=df1) +
geom_point(mapping=aes(x=block,y=performance)) +
geom_line(mapping=aes(x=block,y=performance),color = "blue") +
ylab("Performance (%)") +
xlab("Block") +
geom_hline(mapping = aes(yintercept=50),linetype="dashed") +
facet_wrap(~mouse)
df1 <- df %>% group_by(mouse,block) %>%
summarise(performance = mean(correct))
df1 %>%
ggplot() +
geom_boxplot(mapping=aes(x=block,y=performance,group=block))
df1 %>%
ggplot() +
geom_boxplot(mapping=aes(x=block,y=performance,group=block))
myPlot <- df1 %>%
ggplot() +
geom_boxplot(mapping=aes(x=block,y=performance,group=block))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
df
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df
df
unique(df$mouse)
data.frame(mouse=c("Mn4656","Mn848","Mn4672","Mn4673","Mn7712","Mn7735","Mn829"),
genotype=c("wt","wt","wt","wt","ko","ko","ko"))
dfGeno<-data.frame(mouse=c("Mn4656","Mn848","Mn4672","Mn4673","Mn7712","Mn7735","Mn829"),
genotype=c("wt","wt","wt","wt","ko","ko","ko"))
dfGeno
colnames(df)
colnames(dfGeno)
# find the common variable name
colnames(dfGeno) %in% colnames(df)
# find the common variable name
colnames(dfGeno)[colnames(dfGeno) %in% colnames(df)]
# find the common variable name
colnames(dfGeno) %in% colnames(df)
colnames(df)
colnames(dfGeno)
# find a variable in dfGeno that is also in df
colnames(dfGeno) %in% colnames(df)
colnames(df)
colnames(dfGeno)
# find a variable in dfGeno that is also in df
colnames(dfGeno) %in% colnames(df)
colnames(dfGeno)[colnames(dfGeno) %in% colnames(df)]
dfGeno %>%
count(mouse)
df %>%
count(mouse)
df %>%
left_join(dfGeno,by="mouse")
dfGeno<-data.frame(mouse=as.character(c("Mn4656","Mn848","Mn4672","Mn4673",
"Mn7712","Mn7735","Mn829")),
genotype=c("wt","wt","wt","wt",
"ko","ko","ko"))
dfGeno
df %>%
left_join(dfGeno,by="mouse")
df
dfGeno
dfGeno<-tibble(mouse=c("Mn4656","Mn848","Mn4672","Mn4673",
"Mn7712","Mn7735","Mn829"),
genotype=c("wt","wt","wt","wt",
"ko","ko","ko"))
dfGeno
df %>%
left_join(dfGeno,by="mouse")
df<- df %>%
left_join(dfGeno,by="mouse") # match with mouse
df
df<- df %>%
left_join(dfGeno,by="mouse") # match with mouse
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=0.1,vjust=0) +
xlim(0.2,0.8)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=0.1,vjust=0) +
xlim(0.2,0.8)
df <- df %>% mutate(turn = ifelse( choice == "R" , 0, 1))
head(df,n=5)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=0.1,vjust=0) +
xlim(0.2,0.8)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=0.5,vjust=0) +
xlim(0.2,0.8)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=-0.5,vjust=0) +
xlim(0.2,0.8)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=-0.1,vjust=0) +
xlim(0.2,0.8)
df %>%
group_by(mouse) %>%
summarise(nonAlternance = mean(turn),performance = mean(correct)) %>%
ggplot(mapping=aes(x=nonAlternance,y=performance)) +
geom_point() +
geom_text(aes(label=mouse),hjust=-0.1,vjust=0.5) +
xlim(0.2,0.8)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
?seq
a=2
b=5
X=seq(from = 0, to = 30, by = 1)
data.frame(X=X,Y=X*a+b)
df %>% ggplot(mapping=aes(x=X,y=Y)) +
geom_line()
a=2
b=5
X=seq(from = 0, to = 30, by = 1)
df<-data.frame(X=X,Y=X*a+b)
df
df %>% ggplot(mapping=aes(x=X,y=Y)) +
geom_line()
df %>% ggplot(mapping=aes(x=X,y=Y)) +
geom_line() +
ylim(0,80)
?runif
model<-tibble(
a = runif(n = 250, min = -40, max = 40),
b = runif(n = 250, min = 20, max = 80)
)
models<-tibble(
a = runif(n = 250, min = -40, max = 40),
b = runif(n = 250, min = 20, max = 80)
)
models
ggplot(data=models)+
geom_abline(intercept = b, slope = a)
models<-tibble(
a = runif(n = 250, min = -40, max = 40),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(intercept = b, slope = a)
ggplot(data=models)+
geom_abline(intercept = b, slope = a, alpha = 0.25)
models
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,50)+
ylim(0,100)
models<-tibble(
a = runif(n = 250, min = -20, max = 20),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,50)+
ylim(0,100)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,50)+
ylim(0,10)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,10)+
ylim(0,100)
models<-tibble(
a = runif(n = 250, min = -20, max = 20),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,10)+
ylim(0,100)
models<-tibble(
a = runif(n = 250, min = -5, max = 5),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,10)+
ylim(0,100)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,20)+
ylim(0,100)
models<-tibble(
a = runif(n = 500, min = -5, max = 5),
b = runif(n = 500, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,20)+
ylim(0,100)
models<-tibble(
a = runif(n = 500, min = -5, max = 5),
b = runif(n = 500, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.2)+
xlim(0,20)+
ylim(0,100)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = mean(correct))
{
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = mean(correct))
}
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point()
df1 %>%
ggplot(mapping = aes(x=block,y=performance),position="jitter") +
geom_point()
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = 100 * mean(correct))
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
lm(performance~block,data = df1)
fit<-lm(performance~block,data = df1)
predict(fit)
fit<-lm(performance~block,data = df1)
df1$predicted<-predict(fit)
df1$residuals<-residuals(fit)
df1
fit<-lm(performance~block,data = df1)
df1$predicted<-predict(fit)
df1$residuals<-residuals(fit)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point()
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted))
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted)) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
```{r lm, fig.width = 3, fig.height = 2,echo=FALSE}
fit<-lm(performance~block,data = df1)
df1$predicted<-predict(fit)
df1$residuals<-residuals(fit)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
d<-df1
d$block<-nunif(n = length(d$block), min = -0.5, max = 0.5)
d<-df1
d$block<-runif(n = length(d$block), min = -0.5, max = 0.5)
fit<-lm(performance~block,data = d) # how you would actually get a regressing line
d$predicted<-predict(fit)
d$residuals<-residuals(fit)
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
d<-df1
d$block<-df$block + runif(n = length(d$block), min = -0.5, max = 0.5)
d<-df1
d<-df1
d$block<-d$block + runif(n = length(d$block), min = -0.5, max = 0.5)
fit<-lm(performance~block,data = d) # how you would actually get a regressing line
d$predicted<-predict(fit)
d$residuals<-residuals(fit)
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "grey")
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "red")
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red")
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(0,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(25,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(20,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(0,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(20,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(20,105)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
d <- df %>%
group_by(mouse,block) %>%
summarise(performance = 100 * mean(correct))
d %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
models<-tibble( # create a data frame with many random lines
a = runif(n = 500, min = -5, max = 5), # slope
b = runif(n = 500, min = 20, max = 80) # intercept
)
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=d)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=models)+
xlim(0,14)+
ylim(20,105)
