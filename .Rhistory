?runif
model<-tibble(
a = runif(n = 250, min = -40, max = 40),
b = runif(n = 250, min = 20, max = 80)
)
models<-tibble(
a = runif(n = 250, min = -40, max = 40),
b = runif(n = 250, min = 20, max = 80)
)
models
ggplot(data=models)+
geom_abline(intercept = b, slope = a)
models<-tibble(
a = runif(n = 250, min = -40, max = 40),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(intercept = b, slope = a)
ggplot(data=models)+
geom_abline(intercept = b, slope = a, alpha = 0.25)
models
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,50)+
ylim(0,100)
models<-tibble(
a = runif(n = 250, min = -20, max = 20),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,50)+
ylim(0,100)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,50)+
ylim(0,10)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,10)+
ylim(0,100)
models<-tibble(
a = runif(n = 250, min = -20, max = 20),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,10)+
ylim(0,100)
models<-tibble(
a = runif(n = 250, min = -5, max = 5),
b = runif(n = 250, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,10)+
ylim(0,100)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,20)+
ylim(0,100)
models<-tibble(
a = runif(n = 500, min = -5, max = 5),
b = runif(n = 500, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a, alpha = 0.25))+
xlim(0,20)+
ylim(0,100)
models<-tibble(
a = runif(n = 500, min = -5, max = 5),
b = runif(n = 500, min = 20, max = 80)
)
ggplot(data=models)+
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.2)+
xlim(0,20)+
ylim(0,100)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = mean(correct))
{
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = mean(correct))
}
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point()
df1 %>%
ggplot(mapping = aes(x=block,y=performance),position="jitter") +
geom_point()
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = 100 * mean(correct))
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
lm(performance~block,data = df1)
fit<-lm(performance~block,data = df1)
predict(fit)
fit<-lm(performance~block,data = df1)
df1$predicted<-predict(fit)
df1$residuals<-residuals(fit)
df1
fit<-lm(performance~block,data = df1)
df1$predicted<-predict(fit)
df1$residuals<-residuals(fit)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point()
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted))
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted)) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
```{r lm, fig.width = 3, fig.height = 2,echo=FALSE}
fit<-lm(performance~block,data = df1)
df1$predicted<-predict(fit)
df1$residuals<-residuals(fit)
ggplot(data=df1, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
d<-df1
d$block<-nunif(n = length(d$block), min = -0.5, max = 0.5)
d<-df1
d$block<-runif(n = length(d$block), min = -0.5, max = 0.5)
fit<-lm(performance~block,data = d) # how you would actually get a regressing line
d$predicted<-predict(fit)
d$residuals<-residuals(fit)
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
d<-df1
d$block<-df$block + runif(n = length(d$block), min = -0.5, max = 0.5)
d<-df1
d<-df1
d$block<-d$block + runif(n = length(d$block), min = -0.5, max = 0.5)
fit<-lm(performance~block,data = d) # how you would actually get a regressing line
d$predicted<-predict(fit)
d$residuals<-residuals(fit)
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey")
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "grey")
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_point(mapping  = aes(y=predicted), shape = 1) +
geom_smooth(method = "lm", se = FALSE, color = "red")
ggplot(data=d, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red")
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(0,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(25,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(20,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(0,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(20,100)
ggplot(data=models)+
geom_point(mapping = aes(x=block,y=performance),position="jitter", data=df1) +
geom_abline(mapping = aes(intercept = b, slope = a), alpha = 0.1)+
xlim(0,14)+
ylim(20,105)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
d <- df %>%
group_by(mouse,block) %>%
summarise(performance = 100 * mean(correct))
d %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
models<-tibble( # create a data frame with many random lines
a = runif(n = 500, min = -5, max = 5), # slope
b = runif(n = 500, min = 20, max = 80) # intercept
)
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=d)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=models)+
xlim(0,14)+
ylim(20,105)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
models<-tibble( # create a data frame with 500 random lines
a = runif(n = 500, min = -5, max = 5), # slope
b = runif(n = 500, min = 20, max = 80) # intercept
)
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=d)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=models)+
xlim(0,14)+
ylim(20,105)
myFile="~/repo/dataNeuroCourse/dataSets/tmaze.csv"
df<-read_csv(myFile)
df<-mutate(df, correct = sample != choice)
d <- df %>%
group_by(mouse,block) %>%
summarise(performance = 100 * mean(correct))
d %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
models<-tibble( # create a data frame with 500 random lines
a = runif(n = 500, min = -5, max = 5), # slope
b = runif(n = 500, min = 20, max = 80) # intercept
)
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=d)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=models)+
xlim(0,14)+
ylim(20,105)
one_model_prediction<-function(a, data){
# a should be c(slope,intercept)
# data should be our input X
data$block*a[1]+a[2]
}
one_model_prediction(c(1,50),d)
one_model_prediction(c(10,50),d)
one_model_prediction(c(5,50),d)
one_model_prediction<-function(a, data){
# a should be c(slope,intercept)
# data should be our input X
data$block*a[1]+a[2]
}
one_model_predictions<-function(a, data){
# a should be c(slope,intercept)
# data should be our input X
data$block*a[1]+a[2]
}
predicted<-one_model_predictions(c(5,50),d)
predicted
# define a function
one_model_predictions<-function(parameters, data){
# parameters should be c(slope,intercept) or (a,b)
# data should be our input X
parameters[1] * data$block  + parameters[2] # y = a * x + b
}
# prediction of the model y = 5 * x + 50
one_model_predictions(c(5,50),d)
measure_distance <- function(parameters,data){
diff <- data$performance - one_model_predictions(parameters,data)
sqrt(mean(diff^2))
}
measure_distance(c(5,50),d)
# define a function
one_model_predictions<-function(a, b, data){
# parameters are a and b
# data should be our input X
a * data$block  + b # y = a * x + b
}
# prediction of the model y = 5 * x + 50
one_model_predictions(a=5, b=50, data=d)
measure_distance <- function(a, b, data){
diff <- data$performance - one_model_predictions(a, b,data)
sqrt(mean(diff^2))
}
measure_distance(c(5,50),d)
measure_distance <- function(a, b, data){
diff <- data$performance - one_model_predictions(a, b,data)
sqrt(mean(diff^2))
}
measure_distance(a=5, b=50, data=d)
models %>%
mutate(dist = purrr::map2_dbl(a,b,d_distance))
# helper function
d_distance<-function(a, b){
measure_distance(a,b,d) # we feed our dataframe d
}
models %>%
mutate(dist = purrr::map2_dbl(a,b,d_distance))
models %>%
mutate(dist = d_distance(a,b))
models %>%
mutate(dist = mean(a,b))
models %>%
mutate(dist = a+b)
models %>%
mutate(dist = purrr::map2_dbl(a,b,mean))
models %>%
mutate(dist = purrr::map2_dbl(a,b,d_distance))
print(paste("Root mean square of residuals: ",dist))
dist <- measure_distance(a=5, b=50, data=df1)
print(paste("Root mean square of residuals: ",dist))
measure_distance <- function(a, b, data){
diff <- data$performance - one_model_predictions(a, b,data)
sqrt(mean(diff^2))
}
dist <- measure_distance(a=5, b=50, data=df1)
df1 <- df %>%
group_by(mouse,block) %>%
summarise(performance = 100 * mean(correct))
df1 %>%
ggplot(mapping = aes(x=block,y=performance)) +
geom_point(position="jitter")
dm<-df1
# add a bit of noise to block so that the points are not on top of each other
dm$block<-dm$block + runif(n = length(df1$block), min = -0.5, max = 0.5)
# fit a linear model to the data
fit<-lm(performance~block,data = dm)
# get predicted values and residuals
dm$predicted<-predict(fit)
dm$residuals<-residuals(fit)
# plot
ggplot(data=dm, mapping = aes(x=block,y=performance))+
geom_segment(aes(xend = block, yend = predicted),alpha = 0.2) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red")
# define a function
one_model_predictions<-function(a, b, data){
# parameters are a and b
# data should be our input X
a * data$block  + b # y = a * x + b
}
# prediction of the model y = 5 * x + 50
one_model_predictions(a=5, b=50, data=df1)
measure_distance <- function(a, b, data){
diff <- data$performance - one_model_predictions(a, b,data)
sqrt(mean(diff^2))
}
dist <- measure_distance(a=5, b=50, data=df1)
print(paste("Root mean square of residuals: ",dist))
# helper function, distance between prediction and our data frame d
d_distance<-function(a, b){
measure_distance(a,b,df1) # we feed our dataframe df1
}
# we calculate the distance for all our random models
models <- models %>%
mutate(dist = purrr::map2_dbl(a,b,d_distance))
models$dist
?purrr:map2_dbl
?purrr::map2_dbl
models <- models %>%
mutate(dist = purrr::map2_dbl(a,b,measure_distance,df1))
# purrr::map2_dbl() runs d_distance for each row of the data frame models
models
models <- models %>%
mutate(dist = purrr::map2_dbl(a,b,measure_distance,df1))
# purrr::map2_dbl() runs d_distance for each row of the data frame models
models
models<-tibble( # create a data frame with 500 random lines
a = runif(n = 500, min = -5, max = 5), # slope
b = runif(n = 500, min = 20, max = 80) # intercept
)
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=df1)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=models)+
xlim(0,14)+
ylim(20,105)
measure_distance <- function(a, b, data){
diff <- data$performance - one_model_predictions(a, b,data)
sqrt(mean(diff^2))
}
dist <- measure_distance(a=5, b=50, data=df1)
print(paste("Root mean square of residuals: ",dist))
models <- models %>%
mutate(dist = purrr::map2_dbl(a,b,measure_distance,df1))
# purrr::map2_dbl() runs d_distance for each row of the data frame models
models
models <- models %>%
mutate(dist = purrr::map2_dbl(a,b,measure_distance,df1))
# purrr::map2_dbl() calls measure_distance for each row of models
head(models,n=5)
models %>%
filter(rank(dist)<=10)
ggplot()+
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=df1)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=filter(models,rank(dist)<=10))+
xlim(0,14)+
ylim(20,105)
ggplot()+
geom_point(mapping=aes(x=block,y=performance),position="jitter", data=df1)+
geom_abline(mapping=aes(intercept=b, slope=a), alpha=0.1, data=filter(models,rank(dist)<=10))+
xlim(0,14)+
ylim(20,105)
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point()
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=dist)
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=0.2)
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=0.2) +
geom_point(data=filter(model,rank(dist)<=10),color="red")
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red")
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red") +
geom_point(data=filter(models,rank(dist)<=1),color="blue") +
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red") +
geom_point(data=filter(models,rank(dist)<=1),color="blue")
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red") +
geom_point(data=filter(models,rank(dist)<=1),color="blue")
models %>%
filter(rank(dist)<=10) %>%
order(dist)
models %>%
filter(rank(dist)<=10) %>%
arrange(dist)
?lm
models %>%
filter(rank(dist)==1)
lm(performance~block, data=df1)
models %>%
filter(rank(dist)==1)
lm(performance~block, data=df1)
?lm
ggplot(data=df1,mapping=aes(x=block,y=performance)) +
geom_point()
ggplot(data=df1,mapping=aes(x=block,y=performance)) +
geom_point(position="jitter")
ggplot(data=df1,mapping=aes(x=block,y=performance)) +
geom_point(position="jitter") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_abline(slope=a,intercept = b,data=filter(models,rank(dist)==1))
models
ggplot(data=df1,mapping=aes(x=block,y=performance)) +
geom_point(position="jitter") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
geom_abline(mapping = aes(slope=a,intercept = b),data=filter(models,rank(dist)==1))
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(aes(color=-dist),alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red") +
geom_point(data=filter(models,rank(dist)<=1),color="blue")
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(aes(color=dist),alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red") +
geom_point(data=filter(models,rank(dist)<=1),color="blue")
ggplot(data=models, mapping = aes(x=a,y=b)) +
geom_point(aes(color=-dist),alpha=0.2) +
geom_point(data=filter(models,rank(dist)<=10),color="red") +
geom_point(data=filter(models,rank(dist)<=1),color="blue")
?runif
