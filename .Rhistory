sep = "")
#######################
# timestamps of video #
#######################
fileName1 <-
paste(paste(sessionDir, sessionName, sep = "/"),
".timestamps.arena_top.log",
sep = "")
fileName2 <-
paste(paste(sessionDir, sessionName, sep = "/"),
".arena_top.log",
sep = "")
if(file.exists(fileName1))
arenaTopVideoLog <- read_table2(fileName1)
if(file.exists(fileName2))
arenaTopVideoLog <- read_table2(fileName2)
############################
# tracking from deeplabcut #
############################
fileName <-
paste(
paste(sessionDir, sessionName, sep = "/"),
".arena_top.cropped",dlcModelName,".csv",
sep = ""
)
if(!file.exists(fileName))
{
stop(paste(fileName, "does not exist"))
}
## this is a really ugly format
arenaPosi <-
read_csv(fileName, skip = 3, col_names = FALSE) %>%
rename(
frame_number = X1,
lever_x = X2,
lever_y = X3,
lever_likelihood = X4,
boxPL_x=X5,
boxPL_y=X6,
boxPL_likelihood=X7,
boxPR_x=X8,
boxPR_y=X9,
boxPR_likelihood=X10,
nose_x = X11,
nose_y = X12,
nose_likelihood = X13
) %>%
select(frame_number,
lever_x,
lever_y,
lever_likelihood,
nose_x,
nose_y,
nose_likelihood,
boxPL_x,
boxPL_y,
boxPL_likelihood,
boxPR_x,
boxPR_y,
boxPR_likelihood) %>%
mutate(
lever_x = lever_x / pxPerCmArena,
lever_y = lever_y / pxPerCmArena,
nose_x = nose_x / pxPerCmArena,
nose_y = nose_y / pxPerCmArena,
boxPL_x = boxPL_x / pxPerCmArena,
boxPL_y = boxPL_y / pxPerCmArena,
boxPR_x = boxPR_x / pxPerCmArena,
boxPR_y = boxPR_y / pxPerCmArena
)
list(sessionName=sessionName,
sessionDir=sessionDir,
dlcModelName=dlcModelName,
arenaCoordinates=arenaCoordinates,
bridgeCoordinates=bridgeCoordinates,log=log,
arenaTopVideoLog=arenaTopVideoLog,
arenaPosi=arenaPosi)
sessionData<-loadSessionData(sessionName,pathBase,dlcModelName=dlcModelName)
source("~/repo/autopi_analysis/R/loadSessionData.R")
source("~/repo/autopi_analysis/R/trialSegmentation/trialSegmentation.R")
sessionDir=paste(pathBase,animalNameFromSessionName(sessionName),sessionName,sep="/")
print(sessionDir)
print("load data files")
print(paste("dlc model name:",dlcModelName))
sessionData<-loadSessionData(sessionName,pathBase,dlcModelName=dlcModelName)
print("check video synchronization")
sessionData<-synchroVideoLog(liDa=sessionData)
#print("data integrity check")
sessionData<-tidySessionData(liDa = sessionData)
print("trial segmentation")
trialData<-trialSegmentation(liDa = sessionData)
# save for future analysis
fn<-paste(sessionDir,"/","sessionDataR",sep="")
print(paste("save sessionData to",fn))
save(sessionData,file =fn)
fn<-paste(sessionDir,"/","trialDataR",sep="")
print(paste("save trialData to",fn))
save(trialData,file =fn)
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/videoManipulation.R")
videoCreateArenaTrial(sessionName = "mn4656-04102019-1436",pathBase = pathBase,
type = "trial", maxTrials = 20)
videoCreateArenaTrial(sessionName = "mn4656-10112019-1429",pathBase = pathBase,
type = "trial", maxTrials = 20)
videoCreateArenaTrial(sessionName = "mn4656-10112019-1429",pathBase = pathBase,
type = "leverPress", maxTrials = 20)
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/sessionPlotting.R")
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
#
# script to preprocess one autopi recording session
#
library("tidyverse")
library("gridExtra")
library("relectro")
library("scales")
library("lubridate")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/trialExtraction.R")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/videoManipulation.R")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/sessionPlotting.R")
pathBase="/adata/projects/autopi_2019/data_hippocampus_inactivation"
sessionName="mn4656-10112019-1429"
dlcModelName="DLC_resnet50_arena_topOct30shuffle1_1030000"
loadExtractSaveTrials(sessionName = sessionName,pathBase = pathBase,dlcModelName=dlcModelName)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
library("tidyverse")
library("gridExtra")
library("relectro")
library("scales")
library("lubridate")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/trialExtraction.R")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/videoManipulation.R")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/sessionPlotting.R")
# run preprocessingAutopiSession.py
pathBase="/adata/projects/autopi_2019/data_hippocampus_inactivation"
sessionName="mn4656-10112019-1429"
dlcModelName="DLC_resnet50_arena_topOct30shuffle1_1030000"
loadExtractSaveTrials(sessionName = sessionName,pathBase = pathBase,dlcModelName=dlcModelName)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
pathBase="/adata/projects/autopi_2019/data_hippocampus_inactivation"
sessionName="mn4656-10112019-1429"
dlcModelName="DLC_resnet50_arena_topOct30shuffle1_1030000"
loadExtractSaveTrials(sessionName = sessionName,pathBase = pathBase,dlcModelName=dlcModelName)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
synchroSessions2<-c("mn4672-20112019-1632","mn4673-20112019-1543")
#
# script to preprocess one autopi recording session
#
library("tidyverse")
library("gridExtra")
library("relectro")
library("scales")
library("lubridate")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/trialExtraction.R")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/videoManipulation.R")
source("~/repo/autopi_analysis/R/hippocampus_inactivation_2019/sessionPlotting.R")
# run preprocessingAutopiSession.py
pathBase="/adata/projects/autopi_2019/data_hippocampus_inactivation"
sessionName="mn4672-20112019-1632"
dlcModelName="DLC_resnet50_arena_topOct30shuffle1_1030000"
loadExtractSaveTrials(sessionName = sessionName,pathBase = pathBase,dlcModelName=dlcModelName)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
loadExtractSaveTrials(sessionName = sessionName,pathBase = pathBase,dlcModelName=dlcModelName)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
sessionName="mn4673-20112019-1543"
dlcModelName="DLC_resnet50_arena_topOct30shuffle1_1030000"
loadExtractSaveTrials(sessionName = sessionName,pathBase = pathBase,dlcModelName=dlcModelName)
sessionSummaryPdf(sessionName = sessionName, pathBase = pathBase)
##
## main script to do the analysis of hippocampal inactivation 2019
##
library("tidyverse")
library("googledrive")
library("gridExtra")
library("relectro")
library("scales")
library("lubridate")
library("h5")
library("rhdf5")
synchroSessions<-c("mn4656-01102019-1842", "mn4656-02102019-1702", "mn4656-03102019-1510",
"mn4656-04102019-1436", "mn4656-05102019-1414", "mn4656-06102019-1429",
"mn4656-07102019-1641", "mn4672-01102019-1952", "mn4672-03102019-1627",
"mn4672-04102019-1543", "mn4673-03102019-1730", "mn7712-01102019-2056",
"mn7712-06102019-1645", "mn4656-30092019-2001", "mn4672-02102019-1809",
"mn4672-05102019-1518", "mn4672-07102019-1748", "mn4672-30092019-2105",
"mn4673-01102019-1951", "mn4673-02102019-1807", "mn4673-04102019-1650",
"mn7712-02102019-1915", "mn7712-03102019-1732", "mn7712-04102019-1649",
"mn7712-05102019-1623", "mn7712-07102019-1853", "mn829-01102019-1551",
"mn829-02102019-1558", "mn829-07102019-2107", "mn848-01102019-1840",
"mn848-30092019-1915", "mn4672-20112019-1632","mn4673-20112019-1543")
dfPro<-dfPro %>% filter(session%in%synchroSessions)
dfPro<-loadProtocolFiles(projectPath=projectDir)
##
## main script to do the analysis of hippocampal inactivation 2019
##
library("tidyverse")
library("googledrive")
library("gridExtra")
library("relectro")
library("scales")
library("lubridate")
library("h5")
library("rhdf5")
##
protocolName="autopi_lever_training_arena_door_rotation_lights_moving_lever.py"
protocolName="autopi_probe_slow_rotation.py"
projectDir="/adata/projects/autopi_2019/data_hippocampus_inactivation"
## get a list of sessions with the training protocol
source("~/repo/autopi_analysis/R/importData.R")
dfPro<-loadProtocolFiles(projectPath=projectDir)
synchroSessions<-c("mn4656-01102019-1842", "mn4656-02102019-1702", "mn4656-03102019-1510",
"mn4656-04102019-1436", "mn4656-05102019-1414", "mn4656-06102019-1429",
"mn4656-07102019-1641", "mn4672-01102019-1952", "mn4672-03102019-1627",
"mn4672-04102019-1543", "mn4673-03102019-1730", "mn7712-01102019-2056",
"mn7712-06102019-1645", "mn4656-30092019-2001", "mn4672-02102019-1809",
"mn4672-05102019-1518", "mn4672-07102019-1748", "mn4672-30092019-2105",
"mn4673-01102019-1951", "mn4673-02102019-1807", "mn4673-04102019-1650",
"mn7712-02102019-1915", "mn7712-03102019-1732", "mn7712-04102019-1649",
"mn7712-05102019-1623", "mn7712-07102019-1853", "mn829-01102019-1551",
"mn829-02102019-1558", "mn829-07102019-2107", "mn848-01102019-1840",
"mn848-30092019-1915", "mn4672-20112019-1632","mn4673-20112019-1543")
dfPro<-dfPro %>% filter(session%in%synchroSessions)
dfPro
sessionName
pathBase
knownArenaRadiusCm=40
dlcModelName="DLC_resnet50_arena_topOct30shuffle1_1030000"
sessionDir=paste(pathBase,animalNameFromSessionName(sessionName),sessionName,sep="/")
print(sessionDir)
print("load data files")
print(paste("dlc model name:",dlcModelName))
sessionData<-loadSessionData(sessionName,pathBase,dlcModelName=dlcModelName)
print("check video synchronization")
sessionData<-synchroVideoLog(liDa=sessionData)
#print("data integrity check")
sessionData<-tidySessionData(liDa = sessionData)
print("trial segmentation")
trialData<-trialSegmentation(liDa = sessionData)
class(trialData)
trialData
trialData[[1]]
trialData[[2]]
sessionName=trialData$sessionName
mouse=animalNameFromSessionName(sessionName)
trialData$trialDf
df<-trialData$trialDf
df<-trialData$trialDf
df$sessionName=trialData$sessionName
df$mouse=animalNameFromSessionName(sessionName)
df
df<-trialData$trialDf %>%
mutate(session = trialData$sessionName) %>%
mutate(mouse = animalNameFromSessionName(session))
df
trialData$trialDf %>%
mutate(session = trialData$sessionName) %>%
mutate(mouse = animalNameFromSessionName(session))
trialData$trialDf %>%
mutate(session = trialData$sessionName) %>%
mutate(mouse = animalNameFromSessionName(session)) %>%
select(session,mouse,startTime,endTime,trialNo,startTimeWS,endTimeWS, lightCode, light)
?everything
trialData$trialList[[1]]
oneTrial=trialData$trialList[[1]]
data.frame(trialNo= oneTrial$trialNo,
startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered)
parseOneTrial<- function(oneTrial)
{
return(list(data.frame(trialNo= oneTrial$trialNo,
startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered))
}
parseOneTrial<- function(oneTrial)
{
return(list(data.frame(trialNo= oneTrial$trialNo,
startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered)))
}
oneTrial=trialData$trialList[[1]]
parseOneTrial(oneTrial)
lapply(trialData$trialList,parseOneTrial)
myList<-lapply(trialData$trialList,parseOneTrial)
myList<-lapply(trialData$trialList,parseOneTrial)
rbind(myList)
reduce(myList)
?reduce
reduce(myList,rbind)
do.call("rbind", myList)
myList[[1]]
class(myList[[1]])
parseOneTrial<- function(oneTrial)
{
return(data.frame(trialNo= oneTrial$trialNo,
startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered))
}
myList<-lapply(trialData$trialList,parseOneTrial)
class(myList[[1]])
do.call("rbind", myList)
df1<-trialData$trialDf %>%
mutate(session = trialData$sessionName) %>%
mutate(mouse = animalNameFromSessionName(session)) %>%
select(session,mouse,startTime,endTime,trialNo,startTimeWS,endTimeWS, lightCode, light)
parseOneTrial<- function(oneTrial)
{
return(data.frame(trialNo= oneTrial$trialNo,
startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered))
}
myList<-lapply(trialData$trialList,parseOneTrial)
df2<- do.call("rbind", myList)
reduce(myList,rbind)
cbind(df1,df2)
dataFrameTrial<-function(trialData = trialData)
{
df1<-trialData$trialDf %>%
mutate(session = trialData$sessionName) %>%
mutate(mouse = animalNameFromSessionName(session)) %>%
select(session,mouse,startTime,endTime,trialNo,startTimeWS,endTimeWS, lightCode, light)
parseOneTrial<- function(oneTrial)
{
return(data.frame(trialNo= oneTrial$trialNo,
startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered))
}
myList<-lapply(trialData$trialList,parseOneTrial)
df2<- reduce(myList,rbind)
df<-cbind(df1,df2)
return(df)
}
dfTrial<-dataFrameTrial(trialData = trialData)
dfTrial
head(dfTrial)
print("create a dataframe with trial data")
dfTrial<-dataFrameTrial(trialData = trialData)
fn<-paste(sessionDir,"/","dfTrialR",sep="")
print(paste("save dfTrial to",fn))
save(dfTrial,file =fn)
load(fn)
rm(dfTrial)
load(fn)
dfTrial
dfTrial<-dataFrameTrial(trialData = trialData)
ggplot(dfTrial)+
geom_histogram(mapping = aes(x=homingAngleCentered))
dfTrial
dataFrameTrial<-function(trialData = trialData)
{
df1<-trialData$trialDf %>%
mutate(session = trialData$sessionName) %>%
mutate(mouse = animalNameFromSessionName(session)) %>%
select(session,mouse,startTime,endTime,trialNo,startTimeWS,endTimeWS, lightCode, light)
parseOneTrial<- function(oneTrial)
{
return(data.frame(startFrameId=oneTrial$startFrameId,
endFrameId=oneTrial$endFrameId,
searchDuration=oneTrial$searchDuration,
searchDistance=oneTrial$searchDistance,
leverCoordinatesX=oneTrial$leverCoordinates$x,
leverCoordinatesY=oneTrial$leverCoordinates$y,
arenaCoordinatesX=oneTrial$arenaCoordinates$x,
arenaCoordinatesY=oneTrial$arenaCoordinates$y,
homingPeriDuration=oneTrial$homingPeriDuration,
homingPeriDistance=oneTrial$homingPeriDistance,
homingBridgeDuration=oneTrial$homingBridgeDuration,
homingBridgeDistance=oneTrial$homingBridgeDistance,
homingAngleError=oneTrial$homingAngleError,
homingAngleCentered=oneTrial$homingAngleCentered))
}
myList<-lapply(trialData$trialList,parseOneTrial)
df2<- reduce(myList,rbind)
df<-cbind(df1,df2)
return(df)
}
dfTrial<-dataFrameTrial(trialData = trialData)
dfTrial
ggplot(dfTrial)+
geom_histogram(mapping = aes(x=homingAngleCentered))
ggplot(dfTrial)+
geom_histogram(mapping = aes(x=homingAngleCentered,color=light))
## this function creates a list of list for the trials
#loadExtractSaveTrials
dfPro$session
sessionDir=paste(pathBase,animalNameFromSessionName(sessionName),sessionName,sep="/")
fn<-paste(sessionDir,"/","trialDataR",sep="")
load(fn)
dfTrial<-dataFrameTrial(trialData = trialData)
dfTrial
saveDataFrame<-function(sessionName){
sessionDir=paste(pathBase,animalNameFromSessionName(sessionName),sessionName,sep="/")
fn<-paste(sessionDir,"/","trialDataR",sep="")
load(fn)
dfTrial<-dataFrameTrial(trialData = trialData)
fn<-paste(sessionDir,"/","dfTrialR",sep="")
print(paste("save dfTrial to",fn))
save(dfTrial,file =fn)
}
apply(dfPro$session,saveDataFrame)
apply(dfPro$session,1,saveDataFrame)
dfPro$session
sapply(dfPro$session,saveDataFrame)
### create the trial dataframe for our session
saveDataFrame<-function(sessionName){
sessionDir=paste(pathBase,animalNameFromSessionName(sessionName),sessionName,sep="/")
fn<-paste(sessionDir,"/","trialDataR",sep="")
load(fn)
dfTrial<-dataFrameTrial(trialData = trialData)
fn<-paste(sessionDir,"/","dfTrialR",sep="")
print(paste("save dfTrial to",fn))
save(dfTrial,file =fn)
return(dfTrial)
}
sapply(dfPro$session,saveDataFrame)
apply(dfPro$session,saveDataFrame)
?apply
lapply(dfPro$session,saveDataFrame)
reduce(myList,rbind)
df<-reduce(myList,rbind)
dim(df)
myList<-lapply(dfPro$session,saveDataFrame)
df<-reduce(myList,rbind)
df
dfTrials<-reduce(myList,rbind)
fn=
projectDir
projectDir
paste(projectDir+"/dfTrials",sep="")
paste(projectDir,"/dfTrials",sep="")
fn=paste(projectDir,"/dfTrials",sep="")
print(paste("saving dfTrial to",fn))
save(dfTrials,fn)
save(dfTrials,file = fn)
write_csv(dfTrials,file=fn)
write_csv(dfTrials,fn)
?write_csv
save(dfTrials,file = fn)
fn1=paste(projectDir,"/dfTrials.csv",sep="")
print(paste("saving dfTrial to",fn))
print(paste("saving dfTrial to",fn1))
write_csv(x=dfTrials,path =fn1)
